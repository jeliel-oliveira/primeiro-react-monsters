{"version":3,"sources":["components/search-box/search-box.component.js","components/title/title.component.js","components/card/card.component.js","components/card-list/card-list.component.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Title","title","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","key","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAGaA,G,YAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACpC,OAAQ,2BAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EAC7DI,SAAUH,MCHDI,G,MAAQ,SAAC,GAAW,IAAVC,EAAS,EAATA,MACnB,OAAQ,wBAAIJ,UAAU,SAASI,KCDtBC,G,YAAO,SAACC,GACjB,OACI,yBAAKN,UAAU,kBACX,yBAAKO,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,eACtB,8BAAOJ,EAAMG,QAAQE,MACrB,2BAAIL,EAAMG,QAAQG,UCHjBC,EAAW,SAACP,GACrB,OACI,yBAAKN,UAAU,aAEPM,EAAMQ,SAASC,KAAI,SAACN,GAAD,OACjB,kBAAC,EAAD,CAAMA,QAASA,EAASO,IAAKP,EAAQC,UCoCxCO,E,YAvCb,aAAc,IAAD,8BACX,+CAYFlB,aAAe,SAAAmB,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACXT,SAAU,GACVM,YAAa,IAJJ,E,iFAOO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEL,SAAUc,S,+BAOlC,IAAD,EAC4BC,KAAKN,MAA/BT,EADF,EACEA,SAAUM,EADZ,EACYA,YAEZU,EAAmBhB,EAASiB,QAAO,SAAAtB,GAAO,OAAGA,EAAQE,KAAKqB,cAAcC,SAASb,EAAYY,kBAInG,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAOI,MAAM,qBACb,kBAAC,EAAD,CACEN,YAAY,kBACZC,aAAc8B,KAAK9B,eAErB,kBAAC,EAAD,CAAUe,SAAUgB,S,GAhCVI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.42b5a273.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, handleChange})=>{\n    return (<input className='search' type='search' placeholder={placeholder} \n    onChange={handleChange} />);\n}","import React from 'react';\nimport './title.style.css'\nexport const Title = ({title})=>{\n    return (<h1 className=\"title\">{title}</h1>)\n}","import React from 'react';\nimport './card.style.css'\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}/>\n            <span>{props.monster.name}</span>\n            <p>{props.monster.email}</p>\n        </div>);\n}","import React from 'react'\nimport './card-list.style.css';\nimport {Card} from '../card/card.component'\n//O papel deste component é apenas mostrar\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map((monster) => (\n                  <Card monster={monster} key={monster.id}/>\n                ))\n            }\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component'\nimport {Title} from './components/title/title.component'\nimport {CardList} from './components/card-list/card-list.component'\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n  //Tem que ser arrow function para dar bind no this.\n  handleChange = e => { \n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster=> monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    /* render é rechamado a cada setState */\n    /* setState({}) é assíncrono... */\n    return (\n      <div className=\"App\">\n        <Title title=\"Monsters Rolodex\"/>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}